Traceback (most recent call last):
  File "/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/site-packages/nbclient/client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/site-packages/nbclient/client.py", line 553, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/site-packages/nbclient/client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/site-packages/nbclient/client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# We can get more information about these incidents e.g. "https://www.avalanche.ca/incidents/37d909e4-c6de-43f1-8416-57a34cd48255"
# this information is also available through the API
def get_incident_details(id):
    url = "http://incidents.avalanche.ca/public/incidents/{}?format=json".format(id)
    req = urllib.request.Request(url)
    with urllib.request.urlopen(req) as response:
        result = json.loads(response.read().decode('utf-8'))
    return(result)


incidentsfile = "https://datascience.quantecon.org/assets/data/avalanche_incidents.csv"

# To avoid loading the avalanche Canada servers, we save the incident details locally.
if (not os.path.isfile(incidentsfile)):
    incident_detail_list = incidents_brief.id.apply(get_incident_details).to_list()
    incidents = pd.DataFrame.from_dict(incident_detail_list, orient="columns")
    incidents.to_csv(incidentsfile)
else:
    incidents = pd.read_csv(incidentsfile)

incidents
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mHTTPError[0m                                 Traceback (most recent call last)
[0;32m/tmp/ipykernel_3368/1577351122.py[0m in [0;36m<module>[0;34m[0m
[1;32m     13[0m [0;31m# To avoid loading the avalanche Canada servers, we save the incident details locally.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m     14[0m [0;32mif[0m [0;34m([0m[0;32mnot[0m [0mos[0m[0;34m.[0m[0mpath[0m[0;34m.[0m[0misfile[0m[0;34m([0m[0mincidentsfile[0m[0;34m)[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 15[0;31m     [0mincident_detail_list[0m [0;34m=[0m [0mincidents_brief[0m[0;34m.[0m[0mid[0m[0;34m.[0m[0mapply[0m[0;34m([0m[0mget_incident_details[0m[0;34m)[0m[0;34m.[0m[0mto_list[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     16[0m     [0mincidents[0m [0;34m=[0m [0mpd[0m[0;34m.[0m[0mDataFrame[0m[0;34m.[0m[0mfrom_dict[0m[0;34m([0m[0mincident_detail_list[0m[0;34m,[0m [0morient[0m[0;34m=[0m[0;34m"columns"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     17[0m     [0mincidents[0m[0;34m.[0m[0mto_csv[0m[0;34m([0m[0mincidentsfile[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/site-packages/pandas/core/series.py[0m in [0;36mapply[0;34m(self, func, convert_dtype, args, **kwargs)[0m
[1;32m   4354[0m         [0mdtype[0m[0;34m:[0m [0mfloat64[0m[0;34m[0m[0;34m[0m[0m
[1;32m   4355[0m         """
[0;32m-> 4356[0;31m         [0;32mreturn[0m [0mSeriesApply[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mfunc[0m[0;34m,[0m [0mconvert_dtype[0m[0;34m,[0m [0margs[0m[0;34m,[0m [0mkwargs[0m[0;34m)[0m[0;34m.[0m[0mapply[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   4357[0m [0;34m[0m[0m
[1;32m   4358[0m     def _reduce(

[0;32m/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/site-packages/pandas/core/apply.py[0m in [0;36mapply[0;34m(self)[0m
[1;32m   1034[0m             [0;32mreturn[0m [0mself[0m[0;34m.[0m[0mapply_str[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1035[0m [0;34m[0m[0m
[0;32m-> 1036[0;31m         [0;32mreturn[0m [0mself[0m[0;34m.[0m[0mapply_standard[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1037[0m [0;34m[0m[0m
[1;32m   1038[0m     [0;32mdef[0m [0magg[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/site-packages/pandas/core/apply.py[0m in [0;36mapply_standard[0;34m(self)[0m
[1;32m   1090[0m                 [0;31m# List[Union[Callable[..., Any], str]]]]]"; expected[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1091[0m                 [0;31m# "Callable[[Any], Any]"[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1092[0;31m                 mapped = lib.map_infer(
[0m[1;32m   1093[0m                     [0mvalues[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1094[0m                     [0mf[0m[0;34m,[0m  [0;31m# type: ignore[arg-type][0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/site-packages/pandas/_libs/lib.pyx[0m in [0;36mpandas._libs.lib.map_infer[0;34m()[0m

[0;32m/tmp/ipykernel_3368/1577351122.py[0m in [0;36mget_incident_details[0;34m(id)[0m
[1;32m      4[0m     [0murl[0m [0;34m=[0m [0;34m"http://incidents.avalanche.ca/public/incidents/{}?format=json"[0m[0;34m.[0m[0mformat[0m[0;34m([0m[0mid[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      5[0m     [0mreq[0m [0;34m=[0m [0murllib[0m[0;34m.[0m[0mrequest[0m[0;34m.[0m[0mRequest[0m[0;34m([0m[0murl[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 6[0;31m     [0;32mwith[0m [0murllib[0m[0;34m.[0m[0mrequest[0m[0;34m.[0m[0murlopen[0m[0;34m([0m[0mreq[0m[0;34m)[0m [0;32mas[0m [0mresponse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      7[0m         [0mresult[0m [0;34m=[0m [0mjson[0m[0;34m.[0m[0mloads[0m[0;34m([0m[0mresponse[0m[0;34m.[0m[0mread[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mdecode[0m[0;34m([0m[0;34m'utf-8'[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      8[0m     [0;32mreturn[0m[0;34m([0m[0mresult[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/urllib/request.py[0m in [0;36murlopen[0;34m(url, data, timeout, cafile, capath, cadefault, context)[0m
[1;32m    220[0m     [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    221[0m         [0mopener[0m [0;34m=[0m [0m_opener[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 222[0;31m     [0;32mreturn[0m [0mopener[0m[0;34m.[0m[0mopen[0m[0;34m([0m[0murl[0m[0;34m,[0m [0mdata[0m[0;34m,[0m [0mtimeout[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    223[0m [0;34m[0m[0m
[1;32m    224[0m [0;32mdef[0m [0minstall_opener[0m[0;34m([0m[0mopener[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/urllib/request.py[0m in [0;36mopen[0;34m(self, fullurl, data, timeout)[0m
[1;32m    529[0m         [0;32mfor[0m [0mprocessor[0m [0;32min[0m [0mself[0m[0;34m.[0m[0mprocess_response[0m[0;34m.[0m[0mget[0m[0;34m([0m[0mprotocol[0m[0;34m,[0m [0;34m[[0m[0;34m][0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    530[0m             [0mmeth[0m [0;34m=[0m [0mgetattr[0m[0;34m([0m[0mprocessor[0m[0;34m,[0m [0mmeth_name[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 531[0;31m             [0mresponse[0m [0;34m=[0m [0mmeth[0m[0;34m([0m[0mreq[0m[0;34m,[0m [0mresponse[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    532[0m [0;34m[0m[0m
[1;32m    533[0m         [0;32mreturn[0m [0mresponse[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/urllib/request.py[0m in [0;36mhttp_response[0;34m(self, request, response)[0m
[1;32m    638[0m         [0;31m# request was successfully received, understood, and accepted.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    639[0m         [0;32mif[0m [0;32mnot[0m [0;34m([0m[0;36m200[0m [0;34m<=[0m [0mcode[0m [0;34m<[0m [0;36m300[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 640[0;31m             response = self.parent.error(
[0m[1;32m    641[0m                 'http', request, response, code, msg, hdrs)
[1;32m    642[0m [0;34m[0m[0m

[0;32m/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/urllib/request.py[0m in [0;36merror[0;34m(self, proto, *args)[0m
[1;32m    561[0m             [0mhttp_err[0m [0;34m=[0m [0;36m0[0m[0;34m[0m[0;34m[0m[0m
[1;32m    562[0m         [0margs[0m [0;34m=[0m [0;34m([0m[0mdict[0m[0;34m,[0m [0mproto[0m[0;34m,[0m [0mmeth_name[0m[0;34m)[0m [0;34m+[0m [0margs[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 563[0;31m         [0mresult[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_call_chain[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    564[0m         [0;32mif[0m [0mresult[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    565[0m             [0;32mreturn[0m [0mresult[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/urllib/request.py[0m in [0;36m_call_chain[0;34m(self, chain, kind, meth_name, *args)[0m
[1;32m    500[0m         [0;32mfor[0m [0mhandler[0m [0;32min[0m [0mhandlers[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    501[0m             [0mfunc[0m [0;34m=[0m [0mgetattr[0m[0;34m([0m[0mhandler[0m[0;34m,[0m [0mmeth_name[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 502[0;31m             [0mresult[0m [0;34m=[0m [0mfunc[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    503[0m             [0;32mif[0m [0mresult[0m [0;32mis[0m [0;32mnot[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    504[0m                 [0;32mreturn[0m [0mresult[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/urllib/request.py[0m in [0;36mhttp_error_302[0;34m(self, req, fp, code, msg, headers)[0m
[1;32m    753[0m         [0mfp[0m[0;34m.[0m[0mclose[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    754[0m [0;34m[0m[0m
[0;32m--> 755[0;31m         [0;32mreturn[0m [0mself[0m[0;34m.[0m[0mparent[0m[0;34m.[0m[0mopen[0m[0;34m([0m[0mnew[0m[0;34m,[0m [0mtimeout[0m[0;34m=[0m[0mreq[0m[0;34m.[0m[0mtimeout[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    756[0m [0;34m[0m[0m
[1;32m    757[0m     [0mhttp_error_301[0m [0;34m=[0m [0mhttp_error_303[0m [0;34m=[0m [0mhttp_error_307[0m [0;34m=[0m [0mhttp_error_302[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/urllib/request.py[0m in [0;36mopen[0;34m(self, fullurl, data, timeout)[0m
[1;32m    529[0m         [0;32mfor[0m [0mprocessor[0m [0;32min[0m [0mself[0m[0;34m.[0m[0mprocess_response[0m[0;34m.[0m[0mget[0m[0;34m([0m[0mprotocol[0m[0;34m,[0m [0;34m[[0m[0;34m][0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    530[0m             [0mmeth[0m [0;34m=[0m [0mgetattr[0m[0;34m([0m[0mprocessor[0m[0;34m,[0m [0mmeth_name[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 531[0;31m             [0mresponse[0m [0;34m=[0m [0mmeth[0m[0;34m([0m[0mreq[0m[0;34m,[0m [0mresponse[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    532[0m [0;34m[0m[0m
[1;32m    533[0m         [0;32mreturn[0m [0mresponse[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/urllib/request.py[0m in [0;36mhttp_response[0;34m(self, request, response)[0m
[1;32m    638[0m         [0;31m# request was successfully received, understood, and accepted.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    639[0m         [0;32mif[0m [0;32mnot[0m [0;34m([0m[0;36m200[0m [0;34m<=[0m [0mcode[0m [0;34m<[0m [0;36m300[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 640[0;31m             response = self.parent.error(
[0m[1;32m    641[0m                 'http', request, response, code, msg, hdrs)
[1;32m    642[0m [0;34m[0m[0m

[0;32m/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/urllib/request.py[0m in [0;36merror[0;34m(self, proto, *args)[0m
[1;32m    561[0m             [0mhttp_err[0m [0;34m=[0m [0;36m0[0m[0;34m[0m[0;34m[0m[0m
[1;32m    562[0m         [0margs[0m [0;34m=[0m [0;34m([0m[0mdict[0m[0;34m,[0m [0mproto[0m[0;34m,[0m [0mmeth_name[0m[0;34m)[0m [0;34m+[0m [0margs[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 563[0;31m         [0mresult[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_call_chain[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    564[0m         [0;32mif[0m [0mresult[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    565[0m             [0;32mreturn[0m [0mresult[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/urllib/request.py[0m in [0;36m_call_chain[0;34m(self, chain, kind, meth_name, *args)[0m
[1;32m    500[0m         [0;32mfor[0m [0mhandler[0m [0;32min[0m [0mhandlers[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    501[0m             [0mfunc[0m [0;34m=[0m [0mgetattr[0m[0;34m([0m[0mhandler[0m[0;34m,[0m [0mmeth_name[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 502[0;31m             [0mresult[0m [0;34m=[0m [0mfunc[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    503[0m             [0;32mif[0m [0mresult[0m [0;32mis[0m [0;32mnot[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    504[0m                 [0;32mreturn[0m [0mresult[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/urllib/request.py[0m in [0;36mhttp_error_302[0;34m(self, req, fp, code, msg, headers)[0m
[1;32m    753[0m         [0mfp[0m[0;34m.[0m[0mclose[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    754[0m [0;34m[0m[0m
[0;32m--> 755[0;31m         [0;32mreturn[0m [0mself[0m[0;34m.[0m[0mparent[0m[0;34m.[0m[0mopen[0m[0;34m([0m[0mnew[0m[0;34m,[0m [0mtimeout[0m[0;34m=[0m[0mreq[0m[0;34m.[0m[0mtimeout[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    756[0m [0;34m[0m[0m
[1;32m    757[0m     [0mhttp_error_301[0m [0;34m=[0m [0mhttp_error_303[0m [0;34m=[0m [0mhttp_error_307[0m [0;34m=[0m [0mhttp_error_302[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/urllib/request.py[0m in [0;36mopen[0;34m(self, fullurl, data, timeout)[0m
[1;32m    529[0m         [0;32mfor[0m [0mprocessor[0m [0;32min[0m [0mself[0m[0;34m.[0m[0mprocess_response[0m[0;34m.[0m[0mget[0m[0;34m([0m[0mprotocol[0m[0;34m,[0m [0;34m[[0m[0;34m][0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    530[0m             [0mmeth[0m [0;34m=[0m [0mgetattr[0m[0;34m([0m[0mprocessor[0m[0;34m,[0m [0mmeth_name[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 531[0;31m             [0mresponse[0m [0;34m=[0m [0mmeth[0m[0;34m([0m[0mreq[0m[0;34m,[0m [0mresponse[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    532[0m [0;34m[0m[0m
[1;32m    533[0m         [0;32mreturn[0m [0mresponse[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/urllib/request.py[0m in [0;36mhttp_response[0;34m(self, request, response)[0m
[1;32m    638[0m         [0;31m# request was successfully received, understood, and accepted.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    639[0m         [0;32mif[0m [0;32mnot[0m [0;34m([0m[0;36m200[0m [0;34m<=[0m [0mcode[0m [0;34m<[0m [0;36m300[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 640[0;31m             response = self.parent.error(
[0m[1;32m    641[0m                 'http', request, response, code, msg, hdrs)
[1;32m    642[0m [0;34m[0m[0m

[0;32m/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/urllib/request.py[0m in [0;36merror[0;34m(self, proto, *args)[0m
[1;32m    567[0m         [0;32mif[0m [0mhttp_err[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    568[0m             [0margs[0m [0;34m=[0m [0;34m([0m[0mdict[0m[0;34m,[0m [0;34m'default'[0m[0;34m,[0m [0;34m'http_error_default'[0m[0;34m)[0m [0;34m+[0m [0morig_args[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 569[0;31m             [0;32mreturn[0m [0mself[0m[0;34m.[0m[0m_call_chain[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    570[0m [0;34m[0m[0m
[1;32m    571[0m [0;31m# XXX probably also want an abstract factory that knows when it makes[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/urllib/request.py[0m in [0;36m_call_chain[0;34m(self, chain, kind, meth_name, *args)[0m
[1;32m    500[0m         [0;32mfor[0m [0mhandler[0m [0;32min[0m [0mhandlers[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    501[0m             [0mfunc[0m [0;34m=[0m [0mgetattr[0m[0;34m([0m[0mhandler[0m[0;34m,[0m [0mmeth_name[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 502[0;31m             [0mresult[0m [0;34m=[0m [0mfunc[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    503[0m             [0;32mif[0m [0mresult[0m [0;32mis[0m [0;32mnot[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    504[0m                 [0;32mreturn[0m [0mresult[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda3/envs/lecture-datascience/lib/python3.8/urllib/request.py[0m in [0;36mhttp_error_default[0;34m(self, req, fp, code, msg, hdrs)[0m
[1;32m    647[0m [0;32mclass[0m [0mHTTPDefaultErrorHandler[0m[0;34m([0m[0mBaseHandler[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    648[0m     [0;32mdef[0m [0mhttp_error_default[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mreq[0m[0;34m,[0m [0mfp[0m[0;34m,[0m [0mcode[0m[0;34m,[0m [0mmsg[0m[0;34m,[0m [0mhdrs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 649[0;31m         [0;32mraise[0m [0mHTTPError[0m[0;34m([0m[0mreq[0m[0;34m.[0m[0mfull_url[0m[0;34m,[0m [0mcode[0m[0;34m,[0m [0mmsg[0m[0;34m,[0m [0mhdrs[0m[0;34m,[0m [0mfp[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    650[0m [0;34m[0m[0m
[1;32m    651[0m [0;32mclass[0m [0mHTTPRedirectHandler[0m[0;34m([0m[0mBaseHandler[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mHTTPError[0m: HTTP Error 502: Bad Gateway
HTTPError: HTTP Error 502: Bad Gateway

